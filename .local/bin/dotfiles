#!/usr/bin/env bash
trap "exit" INT # Exit in case of CTRL+C

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
NIX_ROOT="/nix"

if [ -f /etc/os-release ]; then
    # freedesktop.org and systemd
    . /etc/os-release
    OS=$ID
    OS_NAME=$NAME
    VER=$VERSION_ID
fi

if [[ -z "${OS}" ]]; then
    echo "$(tput setaf 1)Error getting distribution. Modify script and try again.$(tput sgr0)"
    exit
fi

# Installing prerequisites
echo "Detected $(tput setaf 4)$OS_NAME$(tput sgr0)"
read -r -n 1 -s -p "Press any key to get started..."
echo ""

# I will only support arch for now.
# First install all dependencies
sudo pacman -Sy --needed --noconfirm \
    base-devel \
    kitty \
    zsh \
    rsync \
    git \
    git-delta \
    neovim \
    firefox \
    fzf \
    bat \
    exa \
    papirus-icon-theme \
    ttf-jetbrains-mono \
    ttf-jetbrains-mono-nerd \
    flatpak

# Install Rustup
curl https://sh.rustup.rs -sSf | sh -s -- -y

# Then install paru
git clone https://aur.archlinux.org/paru.git /tmp/paru
pushd /tmp/paru
makepkg -si
popd

# Lastly, AUR dependencies and Flatpak dependencies
paru -Sy --noconfirm adw-gtk3-git
flatpak install --assumeyes org.gtk.Gtk3theme.adw-gtk3 org.gtk.Gtk3theme.adw-gtk3-dark

############################################################################
# Install nix in user-mode.                                                #
############################################################################
echo -e "${GREEN}Installing Nix...${NC}"
if [ -d "$NIX_ROOT" ]; then
    echo -e "${YELLOW}Nix is already installed. Skipping...${NC}"
else
    sh <(curl -L https://nixos.org/nix/install) --no-daemon --yes
    . $HOME/.nix-profile/etc/profile.d/nix.sh
fi

############################################################################
# Preparation: Get ssh keys                                                #
############################################################################
if ! command -v scp &>/dev/null; then
    echo "scp could not be found. Please install scp and then retry."
    exit
fi
echo -e "${GREEN}Getting SSH keys...${NC}"
# Download SSH keys from a local-only machine with scp
scp dietpi@10.134.6.112:/mnt/dietpi_userdata/secrets/id_ed25519* $HOME/.ssh/

############################################################################
# Get dotfiles                                                             #
############################################################################
# Download dotfiles repo
function config {
    git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $@
}

if [ -d "$HOME/.dotfiles" ]; then
    echo "Dotfiles exist, moving to $HOME/.dotfiles.backup"
    mv $HOME/.dotfiles $HOME/.dotfiles.backup
fi
git clone --bare git@github.com:Ardelean-Calin/dotfiles.git $HOME/.dotfiles
# Create dotfiles backup if needed
mkdir -p $HOME/.config-backup
config checkout
if [ $? = 0 ]; then
    echo "Checked out config."
else
    echo -e "Backing up pre-existing dot files to ${YELLOW}$HOME/.config-backup${NC}"
    config checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | xargs -I{} sh -c 'mkdir -p .config-backup/$(dirname {}) && mv {} .config-backup/{}'
fi
config checkout
git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME config --local status.showUntrackedFiles no
# config config --local status.showUntrackedFiles no

############################################################################
# Setup zsh
############################################################################
curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
curl -sS https://starship.rs/install.sh | sh
zplug install

############################################################################
# Setup other settings such as desktop environment.
############################################################################
echo -e "${GREEN}Setting up Gnome Desktop...${NC}"
cat $HOME/.settings/dconf-settings.ini | dconf load /

############################################################################
# Done.
############################################################################
echo -e "${GREEN}Done! Dotfiles applied successfully. ${NC}"
echo -e "${GREEN}A restart is necessary to apply all settings. ${NC}"
